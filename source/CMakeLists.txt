#
# 添加cmake自带的模块
#
INCLUDE(CheckFunctionExists)


#
# 项目名
#
IF(CMAKE_BUILD_TYPE STREQUAL Debug)

	SET(PROGRAM_NAME        tinyToolkitd)
	SET(PROGRAM_NAME_SHARE  tinyToolkitd)
	SET(PROGRAM_NAME_STATIC tinyToolkitd_static)

ELSE()

	SET(PROGRAM_NAME        tinyToolkit)
	SET(PROGRAM_NAME_SHARE  tinyToolkit)
	SET(PROGRAM_NAME_STATIC tinyToolkit_static)

ENDIF()


#
# 定义当前目录下源文件分组
#
IF(WIN32)

	RECURSE_CURRENT_DIRECTORY_SOURCE_FILE_GROUP()

ENDIF()


#
# 设置库文件生成目录
#
IF(WIN32)

	SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)

ELSE()

	SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

ENDIF()


#
# 检测平台支持的函数
#
CHECK_FUNCTION_EXISTS(accept4 HAVE_ACCEPT4)


#
# 添加编译定义
#
IF(NOT HAVE_ACCEPT4)

	ADD_COMPILE_DEFINITIONS(NO_ACCEPT4)

ENDIF()


#
# 遍历递归当前目录获取源文件
#
RECURSE_CURRENT_DIRECTORY_SOURCE_FILE(SOURCE_FILES)

#
# 链接源文件, 生成库文件
#
ADD_LIBRARY(${PROGRAM_NAME_SHARE}  SHARED ${SOURCE_FILES})
ADD_LIBRARY(${PROGRAM_NAME_STATIC} STATIC ${SOURCE_FILES})


#
# 第三方库
#
IF(WITH_FMT)

	#
	# 链接库
	#
	TARGET_LINK_LIBRARIES(${PROGRAM_NAME_SHARE}  PUBLIC fmt -L${WITH_FMT}/lib)
	TARGET_LINK_LIBRARIES(${PROGRAM_NAME_STATIC} PUBLIC fmt -L${WITH_FMT}/lib)

	#
	# 包含库
	#
	TARGET_INCLUDE_DIRECTORIES(${PROGRAM_NAME_SHARE}  PUBLIC ${WITH_FMT}/include)
	TARGET_INCLUDE_DIRECTORIES(${PROGRAM_NAME_STATIC} PUBLIC ${WITH_FMT}/include)

ELSE()

	#
	# 链接库
	#
	TARGET_LINK_LIBRARIES(${PROGRAM_NAME_SHARE}  PUBLIC fmt)
	TARGET_LINK_LIBRARIES(${PROGRAM_NAME_STATIC} PUBLIC fmt)

ENDIF()


#
# 指定输出名称
#
SET_TARGET_PROPERTIES(${PROGRAM_NAME_SHARE}  PROPERTIES OUTPUT_NAME ${PROGRAM_NAME})
SET_TARGET_PROPERTIES(${PROGRAM_NAME_STATIC} PROPERTIES OUTPUT_NAME ${PROGRAM_NAME})


#
# 使动态库和静态库同时存在
#
SET_TARGET_PROPERTIES(${PROGRAM_NAME_SHARE}  PROPERTIES CLEAN_DIRECT_OUTPUT 1)
SET_TARGET_PROPERTIES(${PROGRAM_NAME_STATIC} PROPERTIES CLEAN_DIRECT_OUTPUT 1)


#
# 指定动态库版本
#
SET_TARGET_PROPERTIES(${PROGRAM_NAME_SHARE} PROPERTIES VERSION ${LIB_VERSION})


#
# 安装库文件
#
INSTALL(TARGETS ${PROGRAM_NAME_SHARE} ${PROGRAM_NAME_STATIC}
		ARCHIVE DESTINATION lib
		LIBRARY DESTINATION lib)


#
# 遍历递归指定目录安装头文件
#
TRAVERSE_INSTALL_INCLUDE(id							include/tinyToolkit/id)
TRAVERSE_INSTALL_INCLUDE(net						include/tinyToolkit/net)
TRAVERSE_INSTALL_INCLUDE(hash						include/tinyToolkit/hash)
TRAVERSE_INSTALL_INCLUDE(pool						include/tinyToolkit/pool)
TRAVERSE_INSTALL_INCLUDE(util					    include/tinyToolkit/util)
TRAVERSE_INSTALL_INCLUDE(debug						include/tinyToolkit/debug)
TRAVERSE_INSTALL_INCLUDE(timer						include/tinyToolkit/timer)
TRAVERSE_INSTALL_INCLUDE(common						include/tinyToolkit/common)
TRAVERSE_INSTALL_INCLUDE(crypto						include/tinyToolkit/crypto)
TRAVERSE_INSTALL_INCLUDE(logger						include/tinyToolkit/logger)
TRAVERSE_INSTALL_INCLUDE(option						include/tinyToolkit/option)
TRAVERSE_INSTALL_INCLUDE(container					include/tinyToolkit/container)
TRAVERSE_INSTALL_INCLUDE(${CMAKE_CURRENT_LIST_DIR}	include/tinyToolkit)
